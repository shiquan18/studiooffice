一、生命周期五种状态

（1）启动状态：Activity的启动状态很短暂，当Activity启动后便会进入运行状态。

（2）运行状态：Activity在此状态时处于屏幕最前端，它是可见、有焦点的，可以与用户进行交互。如单击、长按等事件。
使出现内存不足的情况，Android也会先销毁栈底的Activity，来确保当前的Activity正常运行。

（3）暂停状态：在某些情况下，Activity对用户来说仍然可见，但它无法获取焦点，用户对它操作没有没有响应，此时它处于暂停状态。

（4）停止状态：当Activity完全不可见时，它处于停止状态，但仍然保留着当前的状态和成员信息。如系统内存不足，那么这种状态下的Activity很容易被销毁。

（5）销毁状态：当Activity处于销毁状态时，将被清理出内存。

 

二、生命周期七种方法

（1）onCreate()方法：在Activity创建时调用，通常做一些初始化设置。

（2）onStart()方法：在Activity即将可见时调用。

（3）onResume()方法：在Activity获取焦点开始与用户交互时调用。

（4）onPause()方法：在当前Activity被其他Activity覆盖或锁屏时调用。

（5）onStop()方法：在Activity对用户不可见时调用。

（6）onDestroy()方法：在Activity销毁时调用。

（7）onRestart()方法：在Activity从停止状态再次启动时调用



三、onCreate和onStart之间有什么区别？

（1）可见与不可见的区别。前者不可见，后者可见。

（2）onCreate方法只在Activity创建时执行一次，而onStart方法在Activity中被多次调用。
onCreate能做的事onStart其实都能做，
但是onstart能做的事onCreate却未必适合做。
如前文所说的，setContentView和资源初始化在两者都能做，
然而想动画的初始化在onStart中做比较好。

 

四、onStart方法和onResume方法有什么区别？

（1）是否在前台。onStart方法中Activity可见但不在前台，不可交互，而在onResume中在前台。

（2）职责不同，onStart方法中主要还是进行初始化工作，而onResume方法，根据官方的建议，可以做开启动画和独占设备的操作。

 

五、onPause方法和onStop方法有什么区别？

（1）是否可见。onPause时Activity可见，onStop时Activity不可见，但Activity对象还在内存中。

（2）在系统内存不足的时候可能不会执行onStop方法，因此程序状态的保存、独占设备和动画的关闭、以及一些数据的保存最好在onPause中进行，但要注意不能太耗时。

 

六、切换Activity的生命周期和横竖屏的生命周期

（1）切换Activity时各方法的执行次序是
(A)onPause→(B)onCreate→(B)onStart→(B)onResume→(A)onStop 。
（onPause方法将会释放掉很多系统资源，为切换Activity提供流畅性的保障，而不需要再等多两个阶段，这样做切换更快。）

（2）当手机横竖屏切换时，会根据AndroidManifest.xml文件中Activity的configChanges属性不同而调用不同的生命周期方法。
当使用默认属性时，Activity生命周期会依次调用onCreate()、onStart()、onResume()方法，当进行横竖屏切换时，
调用方法依次是onPause()、onStop()、onDestroy()、onCreate()、onStart()、onResume()方法。

 

七、 Activity的四种启动模式：standard、singleTop、singleTask、singleInstance

（1）standard模式：Standard模式是Android的默认启动模式，你不在配置文件中做任何设置，那么这个Activity就是standard模式，这种模式下，
Activity可以有多个实例，每次启动Activity，无论任务栈中是否已经有这个Activity的实例，系统都会创建一个新的Activity实例

（2）singleTop模式：SingleTop模式和standard模式非常相似，
主要区别就是当一个singleTop模式的Activity已经位于任务栈的栈顶，再去启动它时，不会再创建新的实例,如果不位于栈顶，就会创建新的实例。

（3）singleTask模式：SingleTask模式的Activity在同一个Task内只有一个实例，
如果Activity已经位于栈顶，系统不会创建新的Activity实例，和singleTop模式一样。
但Activity已经存在但不位于栈顶时，系统就会把该Activity移到栈顶，并把它上面的activity出栈。

（4）singleInstance模式：singleInstance模式也是单例的，但和singleTask不同，singleTask只是任务栈内单例，
系统里是可以有多个singleTask Activity实例的，而singleInstance Activity在整个系统里只有一个实例，
启动一singleInstanceActivity时，系统会创建一个新的任务栈，并且这个任务栈只有他一个Activity。
