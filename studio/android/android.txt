1.handler:
在子线程中，进行耗时操作，执行完操作后，发送消息，通知主线程更新UI。

消息机制主要包含：MessageQueue，Handler和Looper这三大部分，以及Message:
Message：需要传递的消息，可以传递数据；
MessageQueue：消息队列，但是它的内部实现并不是用的队列，实际上是通过一个 单链表的数据结构 来维护消息列表，因为单链表在插入和删除上比较有优势。主要功能向消息池投递消息(MessageQueue.enqueueMessage)和取走消息池的消息(MessageQueue.next)；
Handler：消息辅助类，主要功能向消息池发送各种消息事件(Handler.sendMessage)和处理相应消息事件(Handler.handleMessage)；
Looper：不断循环执行(Looper.loop)，从MessageQueue中读取消息，按分发机制将消息分发给目标处理者。

消息机制的运行流程：
当Handler发送消息时，将会调用MessageQueue.enqueueMessage，向消息队列中添加消息。
当通过Looper.loop开启循环后，会不断地从线程池中读取消息，即调用MessageQueue.next，
然后调用目标Handler（即发送该消息的Handler）的dispatchMessage方法传递消息，
然后返回到Handler所在线程，目标Handler收到消息，调用handleMessage方法，接收消息，处理消息。

每个线程中只能存在一个Looper，Looper是保存在ThreadLocal中的。
主线程（UI线程）已经创建了一个Looper，所以在主线程中不需要再创建Looper，但是在其他线程中需要创建Looper。每个线程中可以有多个Handler，一个Looper可以处理来自多个Handler的消息。 Looper中维护一个MessageQueue，来维护消息队列，消息队列中的Message可以来自不同的Handler。

Looper有一个MessageQueue消息队列；
MessageQueue有一组待处理的Message；
Message中记录发送和处理消息的Handler；
Handler中有Looper和MessageQueue。



1 Handler 的背后有 Looper、MessageQueue 支撑，Looper 负责消息分发，MessageQueue 负责消息管理；
2 在创建 Handler 之前一定需要先创建 Looper；
3 Looper 有退出的功能，但是主线程的 Looper 不允许退出；
4 异步线程的 Looper 需要自己调用 Looper.myLooper().quit();  退出；
5 Runnable 被封装进了 Message，可以说是一个特殊的 Message；
6 Handler.handleMessage() 所在的线程是 Looper.loop() 方法被调用的线程，也可以说成 Looper 所在的线程，并不是创建 Handler 的线程；
7 使用内部类的方式使用 Handler 可能会导致内存泄露，即便在 Activity.onDestroy 里移除延时消息，必须要写成静态内部类；


